Pseudo-codigo

function swapRow(M, row1, row2): # operacion elemental de intercambiar renglones
    M[[row1, row2]] = M[[row2, row1]]
    return M
end
    
function multRow(M, row, factor): # operacion elemental de multiplicar renglones por una constante
    M[row,:] = M[row,:] * factor
    return M
end
    
function addRow(M, row1, row2, factor): # operacion elemental de sumar un multiplo de un renglon a otro
    M[row2,:] = M[row2,:] + multRow(M.copy(), row1, factor)[row1, :]
    return M
end
 
function pivoteo(M, row, column): # se pivotea un renglon y una columna de la matriz 
    M = np.array(M, dtype = float)
    if M[row, column] != 1:
        M = multRow(M, row, 1/M[row, column])
    _ = list(enumerate(M)); _.pop(row)
    for ind, i in _:
        M = addRow(M, row, ind, -i[column])
    return M
end

function convertGranM(tbl, M): # le agrega a nuestro tableo una identidad con coeficientes asociados de M
    numRestr = tbl.shape[0]-1
    return np.hstack((tbl, np.vstack((np.identity(numRestr), np.ones(numRestr)*M))))
end

function isOptimal(tbl): # checa si es optima la solucion basica factible
    return True if np.all(tbl[-1][:-1] >=0) else False # si todos los coeficientes son no negativos
end

function findPivotVariable(tbl): # encuentra la variable que sera pivoteada a continuacion
    coefs = tbl[-1][:-1]
    minNegCoef =  min(coefs[:-1]) # encuentra el coeficiente mas negativo por regla de Bland
    index = np.where(coefs == minNegCoef)
    index = np.array(index).flat[0]
    a = tbl[:,index][:-1]
    b = tbl[:,-1][:-1]
    ratios = [] # arreglo para acumular los ratios
    for i,j in zip(a,b):
        ratios.append(j/i) # calculamos los ratios
    ratios = np.array(ratios)
    if np.any(ratios > 0): # si encontramos ratios positivos
        m = min(ratios) # tomamos el minimo
        index2 = np.where(ratios == m) # encontramos en que renglon esta
        return tbl[index, index2].flat[0], np.array(index2).flat[0], index # regresamos el valor de la variable pivote, su renglon y su columna
    else:
        return "unbounded", 0,0 
end

# def matrixForm(preA, preb, prec): # pasamos de nuestra formulacion en lenguaje natural a matrices
#     A = list(map(lambda x: x.remove('+')
#                  , map(lambda x: x, preA)))
#     #A=''
#     return [A, b, c]
    
function canonica(A, b, c): # tomamos nuestras matrices y arreglos creamos un tableo
    #en definitiva el problema radica en la notacion    
    pass
    A = np.array(A)
    A = np.hstack((A, np.identity(len(A))))
    tbl = np.hstack((A, np.array(b)[:,np.newaxis]))
    z = c + list(np.zeros(len(A))) + [0]
    tbl = np.vstack((tbl, z))
    return tbl.astype(float)
end

function solIsEmpty(tbl, auxVars):
    return np.any(tbl[-1][-auxVars:] >= 0) # si alguna de los coeficientes de las vars auxiliares es positivo
end

function simplex(A, b, c):
    tbl = canonica(A, b, c) # crea el tableo 
    tbl, auxVars = convertGranM(tbl, 100) # agrega las vars auxiliares para aplicar el metodo de la gran M
    while True: # iteramos un rato
        if isOptimal(tbl): break # rompemos si es optimo
        pv, row, column = findPivotVariable(tbl) # encontramos la variable pivote
        if pv == "unbounded": return "unbounded" # rompemos si es un problema no acotado
        tbl = pivoteo(tbl, row, column) # pivoteamos sobre la variable pivote
    return tbl if solIsEmpty(tbl, auxVars) else "the solution space is empty"
end

function main():
    #probs = ['problema_A', 'problema_B', 'problema_C']
    #for i in probs:
    #    with open(i, 'r') as file:
    #        print(file.read())
    # with open('problema_A', 'r') as file:
    #    prob = file.read().split("\n")
    #    sa = prob.index('sa') ; var = prob.index('vars')
    #    #print(sa, var)
    #    prec = prob[2]
    #    restr = prob[sa+1:var] 
    #    preA = [item.split(' ')[:-2] for item in restr]
    #    preb = [item.split(' ')[-1] for item in restr]
    #PPL1 = matrixForm(preA, preb, prec)
    #PPL1 = [A, b, c]
    #print(simplex(*PPL1)
    print(solIsEmpty(tbl, 2))

if __name__=="__main__": main() # lo que se correef swapRow(M, row1, row2): # operacion elemental de intercambiar renglones
